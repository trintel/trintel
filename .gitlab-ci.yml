stages:
  - assemble
  - style-check
  - test
  - build-docker

assemble:
  stage: assemble
  image: adoptopenjdk/openjdk11
  
  variables:
     GRADLE_USER_HOME: '.gradle-cache'
     GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $GRADLE_USER_HOME
     
  script:
    - chmod +x gradlew
    - ./gradlew assemble
    - mkdir -p target
    - mv build/libs/trintel-0.0.1-SNAPSHOT.jar target/app.jar
    - ls
    - ls target

  artifacts:
    paths:
      - target/app.jar

style-check:
  stage: style-check
  image: adoptopenjdk/openjdk11
  
  variables:
     GRADLE_USER_HOME: '.gradle-cache'
     GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $GRADLE_USER_HOME
     
  script:
    - chmod +x gradlew
    - ./gradlew spotlessCheck

test:
  stage: test
  image: adoptopenjdk/openjdk11

  only:
    - main
    - deploy

  variables:
     GRADLE_USER_HOME: '.gradle-cache'
     GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $GRADLE_USER_HOME

  script:
    - chmod +x gradlew
    - ./gradlew test

  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
      
deployment:
  stage: build-docker
  image: adoptopenjdk/openjdk11
  
  only: 
    - deploy
   
  script:
    - ls
    - ls target
    - docker build -t trintel .
    - docker stop trintel-container || true
    - docker rm trintel-container || true
    - docker run -d -p 8080:8080 --name trintel-container trintel

