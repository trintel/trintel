stages:
  - assemble
  - style-check
  - test
  - build-docker

assemble:
  stage: assemble
  image: adoptopenjdk/openjdk11
  
  variables:
     GRADLE_USER_HOME: '.gradle-cache'
     GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $GRADLE_USER_HOME
     
  script:
    - chmod +x gradlew
    - ./gradlew assemble
    - mkdir -p target
    - mkdir -p target/resources 
    - mv build/libs/trintel-0.0.1-SNAPSHOT.jar target/app.jar
    - ls build/resources
    - cp -r build/resources target/
    - ls target
    - ls target/resources

  artifacts:
    paths:
      - target

style-check:
  stage: style-check
  image: adoptopenjdk/openjdk11
  
  variables:
     GRADLE_USER_HOME: '.gradle-cache'
     GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $GRADLE_USER_HOME
     
  script:
    - chmod +x gradlew
    - ./gradlew spotlessCheck

test:
  stage: test
  image: adoptopenjdk/openjdk11

  only:
    - main

  variables:
     GRADLE_USER_HOME: '.gradle-cache'
     GRADLE_OPTS: "-Dorg.gradle.daemon=false"
     
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - $GRADLE_USER_HOME

  script:
    - chmod +x gradlew
    - ./gradlew test

  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
      
deployment:
  stage: build-docker
  image: docker:latest
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  
  only: 
    - deploy
   
  script:
    - ls target
    - ls target/resources
    - docker build -t trintel .
    - docker save -o trintel-image.tar trintel
    - curl --upload-file ./trintel-image.tar https://transfer.sh/trintel-image.tar
    - docker stop trintel-container || true
    - docker rm trintel-container || true
    - docker run -d -p 8080:8080 --name trintel-container trintel
